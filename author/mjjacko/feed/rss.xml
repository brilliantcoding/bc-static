<?xml version="1.0" encoding="UTF-8"?><rss
version="2.0"
xmlns:content="http://purl.org/rss/1.0/modules/content/"
xmlns:wfw="http://wellformedweb.org/CommentAPI/"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:atom="http://www.w3.org/2005/Atom"
xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
><channel><title>Matthew Jackowski &#8211; Brilliant Coding Blog</title>
<atom:link href="https://brilliantcoding.com/author/mjjacko/feed/rss.xml" rel="self" type="application/rss+xml" /><link>https://brilliantcoding.com</link>
<description>Be Brilliant</description>
<lastBuildDate>Mon, 16 Dec 2019 14:47:54 +0000</lastBuildDate>
<language>en-US</language>
<sy:updatePeriod>
hourly	</sy:updatePeriod>
<sy:updateFrequency>
1	</sy:updateFrequency>
<generator>https://wordpress.org/?v=5.3</generator><image>
<url>https://brilliantcoding.com/wp-content/uploads/2018/01/brilliantcoding-logo.png</url><title>Matthew Jackowski &#8211; Brilliant Coding Blog</title><link>https://brilliantcoding.com</link>
<width>32</width>
<height>32</height>
</image>
<item><title>Programming for failure &#8211; asynchronous code</title><link>https://brilliantcoding.com/2019/12/programming-for-failure-asynchronous-code/</link>
<pubDate>Thu, 12 Dec 2019 06:09:00 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Software Development]]></category>
<category><![CDATA[Javascript]]></category><guid
isPermaLink="false">http://localhost:32783/?p=680</guid>
<description><![CDATA[<p>When writing asynchronous code, if you haven&#8217;t built your program to handle failure, then often, it may appear that the failure never even happened. Exception handling in asynchronous code is very different than in sequential code, because the failure has to be &#8220;woven&#8221; into the code itself. Let&#8217;s take a closer look at this!Previously we [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2019/12/programming-for-failure-asynchronous-code/">Programming for failure &#8211; asynchronous code</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>Programming for failure &#8211; learning the basics</title><link>https://brilliantcoding.com/2019/01/programming-for-failure-learning-the-basics/</link>
<pubDate>Sat, 19 Jan 2019 06:53:38 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Software Development]]></category>
<category><![CDATA[Java]]></category>
<category><![CDATA[Python]]></category><guid
isPermaLink="false">http://localhost:32783/?p=606</guid>
<description><![CDATA[<p>When code fails, the programmer has to consider what happens when that failure occurs. That includes knowing what the failure means and how to handle it. Exception handling is the sub-program inside of the program where we, as programmers, attempt to exert some control over the results of that failure. Often we break program failures [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2019/01/programming-for-failure-learning-the-basics/">Programming for failure &#8211; learning the basics</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>Functional Programming Ebooks</title><link>https://brilliantcoding.com/2018/05/functional-programming-ebooks/</link>
<pubDate>Sat, 19 May 2018 06:13:41 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Programming Languages]]></category>
<category><![CDATA[Haskell]]></category>
<category><![CDATA[Javascript]]></category>
<category><![CDATA[Lisp]]></category><guid
isPermaLink="false">http://localhost:32783/?p=510</guid>
<description><![CDATA[<p>This is my first list of freely available ebooks about functional programming. Rather than trying to compile a long list of every online ebook on the subject, I focused on the ones that are completely free such that they do not require any registration. However if you do find these useful, I would encourage supporting [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2018/05/functional-programming-ebooks/">Functional Programming Ebooks</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>Java Enterprise Edition, where have you gone?</title><link>https://brilliantcoding.com/2018/03/java-enterprise-edition-where-have-you-gone/</link>
<pubDate>Sat, 10 Mar 2018 19:21:38 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Open Source Software]]></category>
<category><![CDATA[Java]]></category><guid
isPermaLink="false">http://localhost:32783/?p=438</guid>
<description><![CDATA[<p>What is the Java Enterprise Edition framework and why it is still an important part of many applications? About a year and half ago, I wrote a post about it and itâ€™s uncertain future.&#160; Since then there has been quite a few changes and while the future is far from certain, I feel it is [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2018/03/java-enterprise-edition-where-have-you-gone/">Java Enterprise Edition, where have you gone?</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>A Bootstrap 4 hackable WordPress Theme</title><link>https://brilliantcoding.com/2018/01/bootstrap-4-hackable-wordpress-theme/</link>
<pubDate>Sun, 21 Jan 2018 09:30:59 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Notes from the Dev]]></category>
<category><![CDATA[PHP]]></category>
<category><![CDATA[SASS]]></category><guid
isPermaLink="false">http://localhost:32783/?p=396</guid>
<description><![CDATA[<p>Notes from the dev For the Brilliant Coding blog, I built a new WordPress theme called: Brilliant Coding Alpha. Previously I had used existing WordPress themes, which were great, but lacked some of the flexibility I wanted. Instead I wanted something a little more &#8220;hackable&#8221;, after some research I found a few &#8220;theme builders&#8221; that [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2018/01/bootstrap-4-hackable-wordpress-theme/">A Bootstrap 4 hackable WordPress Theme</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>JavaOne and the forgotten Java edition</title><link>https://brilliantcoding.com/2016/10/javaone-forgotten-java-edition/</link>
<pubDate>Sat, 08 Oct 2016 05:00:29 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Programming Languages]]></category>
<category><![CDATA[Java]]></category><guid
isPermaLink="false">http://localhost:32783/?p=252</guid>
<description><![CDATA[<p>JavaOne is one of the biggest annual conferences to discuss Java technologies. It was inaugurated in 1996 by Sun Microsystems, and now is run during Oracle OpenWorld after the 2010 acquisition of Sun by Oracle Corporation. This year there was more excitement than usual around the JavaOne event, usually the event focuses on the technical [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2016/10/javaone-forgotten-java-edition/">JavaOne and the forgotten Java edition</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>Build a Static Website Using Python, Pelican, and Docker</title><link>https://brilliantcoding.com/2016/06/website-using-python-pelican-docker/</link>
<pubDate>Tue, 14 Jun 2016 07:23:06 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Open Source Software]]></category>
<category><![CDATA[Python]]></category><guid
isPermaLink="false">http://192.168.99.100:32769/?p=223</guid>
<description><![CDATA[<p>In this example I&#8217;ll show you how you can build a static website for your open source project on GitHub pages using the combination of Python (language), Pelican (generator), and Docker (environment).&#160; For this type of task, speed is important.&#160; I want to avoid spending time thinking about designing a blog system or implementing a [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2016/06/website-using-python-pelican-docker/">Build a Static Website Using Python, Pelican, and Docker</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>List of Amazing Tech Talks on Software Development</title><link>https://brilliantcoding.com/2016/04/list-of-amazing-tech-talks-on-software-development/</link>
<pubDate>Mon, 18 Apr 2016 06:24:39 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Software Development]]></category><guid
isPermaLink="false">http://192.168.99.100:32769/?p=179</guid>
<description><![CDATA[<p>Building computer software is all about ideas. I find quite a bit of inspiration from listening to presentations and tech talks from other people in software development. You should be warned that some people might find the topics below fairly controversial! But I feel that&#8217;s good. To me, if a presentation makes you pause to [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2016/04/list-of-amazing-tech-talks-on-software-development/">List of Amazing Tech Talks on Software Development</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>Refactoring to Factory Function in PHP</title><link>https://brilliantcoding.com/2016/04/refactoring-to-factory-methods-in-php/</link>
<pubDate>Mon, 04 Apr 2016 05:49:52 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Code Refactor]]></category>
<category><![CDATA[PHP]]></category><guid
isPermaLink="false">http://192.168.99.100:32772/?p=147</guid>
<description><![CDATA[<p>This is a quick example to show a simple PHP refactoring for object creation.Â  Specifically our goal is to use static functions to better encapsulate our object constructor calls. In this example, we assume that we have a flexible message constructor that allows us to build messages given some text and time information. public function [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2016/04/refactoring-to-factory-methods-in-php/">Refactoring to Factory Function in PHP</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>Looking ahead: JVM Programming Languages</title><link>https://brilliantcoding.com/2016/03/jvm-programming-languages/</link>
<pubDate>Thu, 24 Mar 2016 04:51:09 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Programming Languages]]></category>
<category><![CDATA[Clojure]]></category>
<category><![CDATA[Java]]></category>
<category><![CDATA[Kotlin]]></category>
<category><![CDATA[Scala]]></category><guid
isPermaLink="false">http://192.168.99.100:32791/?p=109</guid>
<description><![CDATA[<p>In this article I take a look ahead at the future of four programming languages; Java, Scala, Clojure and Kotlin. All four of these languages are designed to run on the Java Virtual Machine ( JVM ), which is supported on practically every computer operating system. Most recently, JVM programming languages have become popular choices [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2016/03/jvm-programming-languages/">Looking ahead: JVM Programming Languages</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>Refactoring a For-Loop to a Lambda in Java</title><link>https://brilliantcoding.com/2015/12/refactoring-a-for-loop-to-a-lambda-in-java/</link>
<pubDate>Mon, 28 Dec 2015 07:47:49 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Code Refactor]]></category>
<category><![CDATA[Java]]></category><guid
isPermaLink="false">http://localhost:32783:8080/?p=62</guid>
<description><![CDATA[<p>This is a quick example to show refactoring a &#8216;for-loop&#8217; over a List of objects by using a Lambda function instead. We will take a simple List of Message objects and simply output the name of the message. Typically you may want to perform various side affects instead of the outputting the object&#8217;s name on [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2015/12/refactoring-a-for-loop-to-a-lambda-in-java/">Refactoring a For-Loop to a Lambda in Java</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>Open Source programming environments that make coding easier</title><link>https://brilliantcoding.com/2015/12/open-source-programming-environments-that-make-coding-easier/</link>
<pubDate>Tue, 22 Dec 2015 07:11:12 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Developer Tools]]></category>
<category><![CDATA[C]]></category>
<category><![CDATA[Java]]></category>
<category><![CDATA[Javascript]]></category>
<category><![CDATA[PHP]]></category>
<category><![CDATA[Python]]></category>
<category><![CDATA[Ruby]]></category><guid
isPermaLink="false">http://localhost:32783:8080/?p=50</guid>
<description><![CDATA[<p>A programmer&#8217;s life is hard enough keeping up-to-date on the latest technologies, understanding product specifications, and debugging issues. These programming environments help keep programmer sane by offering integrated syntax coloring, auto-completion, debugging tools and more. The main tools on this list are also all Open Source projects themselves. This enables you to directly contribute to [&#8230;]</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2015/12/open-source-programming-environments-that-make-coding-easier/">Open Source programming environments that make coding easier</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
</item>
<item><title>Refactoring to Strategy Pattern in Javascript</title><link>https://brilliantcoding.com/2015/12/refactoring-to-strategy-pattern-in-javascript/</link>
<comments>https://brilliantcoding.com/2015/12/refactoring-to-strategy-pattern-in-javascript/#respond</comments>
<pubDate>Mon, 21 Dec 2015 06:57:28 +0000</pubDate>
<dc:creator><![CDATA[Matthew Jackowski]]></dc:creator>
<category><![CDATA[Code Refactor]]></category>
<category><![CDATA[Javascript]]></category><guid
isPermaLink="false">http://192.168.99.100:32769/?p=16</guid>
<description><![CDATA[<p>This is a quick example to show refactoring to a strategy pattern.  We will take a simple function that uses a case statement and refactor with the strategy pattern. Keep in mind this approach will also work with 'if ... else' trees too!</p><p>The post <a
rel="nofollow" href="https://brilliantcoding.com/2015/12/refactoring-to-strategy-pattern-in-javascript/">Refactoring to Strategy Pattern in Javascript</a> appeared first on <a
rel="nofollow" href="https://brilliantcoding.com">Brilliant Coding Blog</a>.</p>
]]></description>
<wfw:commentRss>https://brilliantcoding.com/2015/12/refactoring-to-strategy-pattern-in-javascript/feed/rss.xml</wfw:commentRss>
<slash:comments>0</slash:comments>
</item>
</channel>
</rss>